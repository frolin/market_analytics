module Telegram
  module Notifications
    class SalesNew
      include ApplicationHelper

      def initialize(sale)
        @sale = sale
        @store = sale.store
        @user = sale.store.users.admin
        @request = sale.store.requests.last
        @product_info = sale.products.first.requests.last
      end

      def call
        notification = ::NewParsedData.with(source: @store, photo: photo_path,
                                            text: message_text,
                                            user_ids: @store.tg_users.pluck(:id))

         @store.tg_users.each do |tg_user|
          notification.deliver_later(tg_user)
        end
      end

      private

      def message_text
        msg = []
        if @sale.canceled?
          msg << "‚ùå –ù–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç \n"
        else
          msg << "‚úÖ –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ \n"
        end

        msg << "üÜî <b>–ú–∞–≥–∞–∑–∏–Ω:</b> <a href='#{@store.url}'> #{@request.data['name']} </a>"
        msg << "üìÜ #{I18n.l(@sale.api_data['date'].to_datetime)} \n"

        msg << "üìÅ #{@sale.subject}"
        msg << "üè∑Ô∏è <a href='#{@sale.product.url}'> #{@sale.barcode} </a>"
        msg << "#{@sale.product.title}"
        msg << "‚≠ê#{@sale.product.rating} üí¨ #{@sale.product.reviews_count} \n"

        msg << "üìà –ü—Ä–æ–¥–∞–∂–∏: —Å–µ–≥–æ–¥–Ω—è: #{@sale.product.today_sales.count} –≤—á–µ—Ä–∞: #{@sale.product.yesterday_sales.count} \n"

        msg << data_text

        msg.join("\n")
      end

      def data_text
        # ‚úÖ –í—ã–∫—É–ø [1] : 1 772 ‚ÇΩ
        # üìà –°–µ–≥–æ–¥–Ω—è: 1 –Ω–∞ 1 772 ‚ÇΩ
        # üÜî –ê—Ä—Ç: 139200844 (https : // www.wildberries.ru / catalog / 139200844 / detail.aspx? targetUrl = XS)
        # üìÅ –†—é–∫–∑–∞–∫–∏
        # üè∑ / BP - 01 (https : // www.wildberries.ru / catalog / 139200844 / detail.aspx? targetUrl = XS)
        # ‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: 5.0
        # üí¨ –û—Ç–∑—ã–≤—ã: 4
        # üíµ –°–µ–≥–æ–¥–Ω—è —Ç–∞–∫–∏—Ö: 1 –Ω–∞ 1 772 ‚ÇΩ
        # üí∂ –í—á–µ—Ä–∞ —Ç–∞–∫–∏—Ö: 0
        # üíº –ö–æ–º–∏—Å—Å–∏—è: 23 %
        #   üåê –ö–æ–ª–µ–¥–∏–Ω–æ ‚Üí –ú–æ—Å–∫–æ–≤—Å–∫–∞—è
        # üì¶ 27 —à—Ç.—Ö–≤–∞—Ç–∏—Ç –Ω–∞ 22 –¥–Ω.

        text = []

        text << "üöÉ –î–æ—Å—Ç–∞–≤–∫–∞: #{@sale.warehouse} ‚Üí  #{@sale.oblast} –æ–±–ª–∞—Å—Ç—å"
        text << "üí∞ –¶–µ–Ω–∞: #{money(@sale.price)}, —Å–∫–∏–¥–∫–∞ #{@sale.discount} %"
        text << "üí∞ –í—ã–ø–ª–∞—Ç–∞: #{money(@sale.pay)}"
        text << "üí≥ –ü—Ä–∏–±—ã–ª—å: ? \n"



        text << "–û—Å—Ç–∞—Ç–∫–∏: \n #{stock_count}"
      end

      def stock_count
        @sale.product.stock.map do |stock|
          "üì¶Ô∏è #{stock[:warehouse]} ‚Üí #{stock[:quantity]}—à—Ç. \n"
        end.join(" ")
      end

      def photo_path
        @sale.product.photo_url
      end

    end
  end
end
