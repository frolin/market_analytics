c
new_orders.size
new_orders
c
new_orders
c
raise
new_orders.size
c
raise
!!!
Sale.wb_find(saleID: 'S4186242923')
ap Sale.last
Sale.last
Sale.wb_find(sale_id: 'S4186242923')
Sale.wb_find(saleId: S4186242923)
Sale.wb_find(saleId: 'S4186242923')
Sales.wb_find(saleId: S4186242923)
Sales.wb_find(saleId: sale['saleID'])
Sale.last.api_data['saleID']
Sale.last.api_data
Sale.last
Sale.count
@found_sale
c
sales.size
sales.uniq {|sale| sale['odid']  }.size
sales.select {|sale| sale['odid'] == 601405151484 }.size
sales.select {|sale| sale['odid'] == 601405151484 } 
sales.select {|sale| sale['odid'] == '601405151484' } 
ap sale
ap @found_sale
@found_sale
data_diff?(sale)
c
 data_diff?(sale)
@found_sale
c
audit.audited_changes
audit.audited_changes.values
audit.audited_changes.values.flatten
 Tools::HashDiff.call(hash1, hash2)
ap Tools::HashDiff.call(hash1, hash2)
hash1, hash2 = @sale.audits.last.audited_changes['api_data']
@sale.audits.last.audited_changes['api_data'].size
@sale.audits.last.audited_changes['api_data']
@sale.audits.last.audited_changes.size
@sale.audits.last.audited_changes
@sale.audits.last
@sale.audits.first
.first
@sale.audits
@sale.audits.count
c
@order.audits.first.audited_changes
@order.audits.first.audit_changes
@order.audits.first
@order.audits
c
order.audits.first
order.audits.first['api_data']
order.audits.size
order.audits
order = audit.auditable
audit.auditable
audit
audit.audits
audit.auditeds
audit.audited_changes.size
audit.audited_changes
audit.audited_changes['api_data'].size
audit.audited_changes['api_data']
audit.audited_changes.api_data
audit.audited_changes
audit.audited_changes.values
audit.audited_changes
audit.audited_change
c
hash2
hash1
c
event.last.size
event.last
event.last.group_by_day(:date).count
c
event.last
event.first
event.size
event
events.values.first
events.values
event.first
event.size
event
c
next
@found_sale.present? && data_diff?(sale)
next
data_diff?(sale)
@found_sale.id
c
@found_sale.id
c
@found_sale.id
c
@found_sale.id
c
@found_sale.id
c
@found_sale.id
c
@found_sale
c
@found_sale
c
@found_sale
c
@found_sale
c
@found_sale
c
@found_sale
c
@found_sale
c
@found_sale
c
@found_sale
c
@found_sale
c
@found_sale
sale.id
sale
data_diff?(sale)
@found_sale.present? && data_diff?(sale)
c
sale['isRealization'] = false
c
data_diff?(sale)
sale['isRealization'] = false
sale['isRealization']
sale
data_diff?(sale)
 @found_sale.present?
sale
l
c
new_sales.size
new_sales
c
sale.save!
sale.sale_products.new(product: product, sale: sale)
sale.store = store
sale.state = :with_order
sale = order.sales.new(api_data: sell, date: sell['date'])
sale.errors
sale.save!
sale = order.sales.new(api_data: sell, date: sell['date'])
sale
l
cc
c
sale.save!
sale.sale_products.new(product: product, sale: sale)
sale.state = :without_order
sale = store.sales.new(api_data: sell, store: store, date: sell['date'])
sale.errors
sale.save!
next
sale
next
order
product
c
new_sales.size
new_sales
c
Sale.count
sales.count
sales.last
new_sales
c
data_text
c
@order.products.last.photos.first.image.url
@store.images.first.image(:large).url
photo_path
data_text
c
cc
c
cc
c
exit
c
object.api_data['totalPrice'] * (1 - object.api_data['discountPercent'].to_f / 100)
(1 - object.api_data['discountPercent'].to_f / 100)
(17 / 100).to_f
(17 / 100)
17 / 100
object.api_data['discountPercent'] 
object.api_data['discountPercent'] / 100
( object.api_data['discountPercent'] 4/ 100)
(1 - object.api_data['discountPercent'] / 100)
object.api_data['totalPrice'] * (1 - object.api_data['discountPercent'] / 100)
object.api_data['totalPrice'] 
c
@store = current_user.stores.last.slug
@store = current_user.stores
@store = current_user.stores.find_by(slug: params[:store_id])
@store = current_user.stores.find(params[:store_id])
params
c
audit.audited_changes.values.flatten
audit.audited_changes.values.size
audit.audited_changes.values
audit.audited_changes.size
audit.audited_changes
audit.audited_changes.pluck(:api_data)
c
a1.to_a - a2.to_a
a1 - a2
a2 = audit.audited_changes['api_data'].last
a1 = audit.audited_changes['api_data'].first
a1 - a2
a1 = audit.audited_changes['api_data'].last
a1 = audit.audited_changes['api_data'].first
audit.audited_changes['api_data'].first
audit.audited_changes['api_data'].size
audit.audited_changes['api_data']
audit.audited_changes.size
audit.audited_changes
ap audit.audited_changes
hash
hash.last
hash.first
hash
c
k
c
next
k
v
l
ls
v
k
c
e
next
c
order.save!
next
order['date']
order
