c
store.stocks
c
next
c
next
c
next
c
page_data.result
page_data
c
store
store.stocks
store.stocks.where.not(api_data: {})
store
ыещку
c
store
ap found_order
a found_order
found_order
found_order.errors
found_order.save
found_order.api_data.merge!(order)
order
c
data_diff?(order, found_order)
found_order
c
e
next
orders.count
c
e.message
e
next
c
e.message
e.messages
e
next
orders
c
@request
c
store.sales
store.sells
store.orders
store
c
store
next
store
c
ap new_orders.last
new_orders.last
new
c
new_orders.count
c
next
new_orders.size
new_orders
c
new_orders
c
new_orders
c
new_orders
c
orders
c
next
c
tg_user.user.stores
tg_user.stores
tg_user
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
orders.size
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
orders.size
found_order
c
new_orders.size
c
new_orders.size
c
new_orders.size
new_orders
c
new_orders
c
new_orders.size
new_orders
c
new_orders
c
next
new_orders.size
new_orders
c
next
new_orders
c
store
new_orders
c
!!!
c
@order.product.stock
c
@order.product.stock
c
@order.product.stockc
c
@order.product.title
@order.product
@order.product.stock
@order.product
c
e
next
c
next
found_order
next
c
data_diff?(order, found_order)
found_order
c
e
next
c
C
e
next
first_time
next
 request_data[:name]
c
request_data
request_data['name']
store.name.blank?
c
request_data = page_data.result
c
request_data = page_data.result
c
!!!
new_store.errors
            new_store = ::Store::Wb.create(token: token)
a
a = tg_user.user.update(role: 'admin', account: account)
store.blank?
account
tg_user.user
next
c
@store.tg_users.count
c
@store.tg_users.count
c
@store.tg_users.count
c
@store.tg_users.count
@store.tg_users
@store
c
e
next
order
next
Product.find_by(barcode: order['barcode'])
order['barcode']
product
next
c
e.message
e.messages
e.errors
e.error
e
next
new_orders
c
cc
c
cc
c
found_order
next
order
c
up
orders.size
orders.soze
orders
new_orders
c
p.store
p.stock
p.
c
next
notification = ::Stocks.with(source: @store,
                                     text: message_text,
                                     user_ids: @store.users.ids)
@store.users.map(&:tg_user.id)
@store.users.map(&:tg_user.ids)
@store.users.map(&:tg_user).ids
@store.users.map(&:tg_user)
@store.users.map(&:tg_user.id)
@store.users.map(&:tg_user_id)
@store.users
