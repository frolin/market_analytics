c
stocks.result.pluck('barcode')
stocks.result
stocks.valid?
stocks
c
next
stocks.result
stocks.valid?
stocks
c
stocks.invalid?
c
exit
!!!
c
cc
c
ap stock
ap stock['barcode']
stock['barcode']
stock
p.errors.full_messages
p.errors
p.save!
p.save
p.stocks
p
c
cc
c
cc
c
next
c
s
c
s
p
c
stocks.result.first
Stock.new
stocks.result.first
stocks.result.size
stocks.result
stocks
stock
l
response
response.body
p.stocks.new
p.stocks
p.stock
p = campaign.products.new
campaign.products.new
campaign.new
campaign..new
campaign.products
campaign
p
stocks.result.first
stocks.first
p
c
next
c
response.env.url
response.headers
response.status
response.url
response.url_encoded
response.url
response
response.url
response
response.request
response
next
c
key
response
parsed_body
next
type
nexttype
next
c
stocks.result
stocks.valid?
c
raise
stocks.valid?
stocks
stocks.result
c
stocks.result
next
stocks.valid?
c
stocks.result
stocks.valid?
stocks
c
stocks
stocks.errors
stocks
c
stocks.result
stocks.valid?
stocks.invalid?
stocks.errors
stocks.result
stocks
next
campaign_id
user_id
c
Imports::FirstTime.run!(user_id: user_id, campaign_id: campaign_id)
c
stock['barcode']
c
next
product
next
stocks_data.result
stock
c
stocks_data.result
stocks_data
stock_data
stocks_data.errors
stocks_data.body
stocks_data
stock_data
stock
c
stock_data
stock_data.errors
stock_data.success?
stock_data.result
stock_data
c
next
c
response
c
stocks_data.success?
next
c
stocks_data.success?
stocks_data
next
stocks_data
next
c
stocks_data
stock
c
stock
stocks_data
c
Telegram::Greeting.new(from).campaign_list
c
Telegram::Greeting.new(from)
c
exc
next
c
stock_data
next
c
stock_data.success? 
stock_data.error? 
stock_data
next
c
stock_data
next
continue
params
market_params
params
market_params
