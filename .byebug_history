c
to = I18n.t(Ad.statuses.key(changes.values[0][1]), scope: [:activerecord, :attributes, :ads, :statuses])
from = I18n.t(Ad.statuses.key(changes.values[0][0]), scope: [:activerecord, :attributes, :ads, :statuses])
from = I18n.t(Ad.statuses.key(changes.values[0][0]), scope: [:activerecord, :attributes, :statuses])
 I18n.t(changes.values[0][0], scope: [:activerecord, :attributes, :statuses])
c
I18n.t("telegram.notifications.diff_store_ads_data.#{changes.keys.first}", before: changes.values[0], after: changes.values[0])
changes = @ad.audits.last.audited_changes
c
reload!
@ad.audits.last.audited_changes.keys
@ad.audits.last.audited_changes
c
Tools::HashDiff.call(new_data, old_data)
Tools::HashDiff.call(new_data, old_data)changes = Tools::HashDiff.call(new_data, old_data)
Tools::HashDiff.call(new_data, old_data)
c
data[key][0]
c
data[key][0]
data[key][1]
ata[key][1]
"telegram.notifications.diff_store_ads_data.#{key}"
key
c
data
data[key]
c
data[key]c
data[key]
key
c
key.keys.firstc
key.key
key
c
 @ad.audits.last.audited_changes['data'].present?
changes = Tools::HashDiff.call(new_data, old_data)
c
changes = Tools::HashDiff.call(new_data, old_data)
c
key
c
changes.each do |key, value|
          byebug
          I18n.t("telegram.notifications.diff_store_ads_data.#{key}", before: value[0], after: value[0])
        end
changes.each do |key, value|
          I18n.t("telegram.notifications.diff_store_ads_data.#{key}", before: value[0], after: value[0])
        end
changes = Tools::HashDiff.call(new_data, old_data)
changes
changes.each do |key, value|
          I18n.t("telegram.notifications.diff_store_ads_data.#{key}", before: value[0], after: value[0])
        end
changes.each do |change|
          I18n.t("telegram.notifications.diff_store_ads_data.#{change}", before: change, after: change.last)
        end
changes = Tools::HashDiff.call(new_data, old_data)
Tools::HashDiff.call(new_data, old_data)
Tools::HashDiff
new_data.to_a - old_data.to_a
Hash[*(new_data.to_a - old_data.to_a).flatten]
new_data = @ad.audits.last.audited_changes['data'].last
old_data = @ad.audits.last.audited_changes['data'].first
Hash[*(new_data.to_a - old_data.to_a).flatten]
changes
c
store.stocks
c
next
c
next
c
next
c
page_data.result
page_data
c
store
store.stocks
store.stocks.where.not(api_data: {})
store
ыещку
c
store
ap found_order
a found_order
found_order
found_order.errors
found_order.save
found_order.api_data.merge!(order)
order
c
data_diff?(order, found_order)
found_order
c
e
next
orders.count
c
e.message
e
next
c
e.message
e.messages
e
next
orders
c
@request
c
store.sales
store.sells
store.orders
store
c
store
next
store
c
ap new_orders.last
new_orders.last
new
c
new_orders.count
c
next
new_orders.size
new_orders
c
new_orders
c
new_orders
c
new_orders
c
orders
c
next
c
tg_user.user.stores
tg_user.stores
tg_user
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
orders.size
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
found_order
c
orders.size
found_order
c
new_orders.size
c
new_orders.size
c
new_orders.size
new_orders
c
new_orders
c
new_orders.size
new_orders
c
new_orders
c
next
new_orders.size
new_orders
c
next
new_orders
c
store
new_orders
c
!!!
c
@order.product.stock
c
@order.product.stock
c
@order.product.stockc
c
@order.product.title
@order.product
@order.product.stock
@order.product
c
e
next
c
next
found_order
next
c
data_diff?(order, found_order)
found_order
c
e
next
c
C
e
next
first_time
next
 request_data[:name]
c
request_data
request_data['name']
store.name.blank?
c
request_data = page_data.result
c
request_data = page_data.result
